
#pragma once

@("char", "uchar", "short", "ushort", "int", "uint", "char*") 
@//
/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 //
//    LGParser.h

/*    Generated by: @program; @version;
      Grammar:      @grm_file;
      Skeleton:     @skl_file;
      Output:       @out_file;
*/               
		#include "LGLexer.h"

@numb_tact?;...
		#define TOKEN_ACTIONS
@@
@numb_pact?;...
		#define PARSE_ACTIONS
@@
@numb_nact?;...
		#define NODE_ACTIONS
@@
@def_cons?;...

   // Defined constants ...
      @def_cons.1|#undef  %15s||\n      |;

      @def_cons.1|#define %15s %5d // %T||\n      |;

@@
@numb_node?;...
   // Defined constants for the node names ...
      @node_name.1|#define %15u %5d||\n      |;

@@
      class LGParser : public LGLexer
		{
		   public:
		// Functions ...
			static void     initialize   (int);				
			static int      Parse        ();	
			static int      parse        ();	
			static void     terminate    ();	
			static void     syntax_error (int);

		// Variables ...
         static PStack*  PS;           	      // Parse Stack pointer.       
         static PStack*  PS_end;        	      // Parse Stack end.       

			static @pact_arg. 8t; pact_arg[];		      // Parse-action argument index (for first arg).
			static @nact_arg. 8t; nact_arg[];		      // Node-action argument index (for first arg).
			static @arg_numb. 8t; arg_numb[];		      // Argument numbers.
			static @arg_text. 8t; arg_text[];		      // Argument text (for string arguments).
	      static @head_prod.8t; f_prod[];
		   static @prod_tail.8t; f_tail[];

			static char*    T_start;
			static char*    T_end; 
			static int      T_line;        

		   private:
		// Functions ...
			static int      nd_parse      (int*, int*, int*, int x, int t, int a);
			static int      apply         (int p); 
			static int      linkup			(int p);
			static void     rebuild		   ();                           
			static short    err_rec		   (short, short);
			static short    lookahead		(short t, short x);
			static void     get_list		(short);
			static void     prt_token		(short); 
			static void     prt_prod		(short); 
			static void     prt_stack		(); 
			static void     expecting		(); 
			static void     restore       ();
			static void	    collect		   (int x);
			static void	    reduce			(int p, int x);
			static void     prt_list      (int t);
			static char*    prt_line      (char* ls, int ln); 
			static void	    prt_pointer   (char* ls, int ln, char* token);

		// Variables ...
			static int      max_errs;				   // Maximum allowable errors.
         static RStack*  RS;           		   // Reduction Stack pointer.
			static char*    T_list;					   // Terminal symbol list (0 or 1).
			static char*    H_list;					   // Head symbol list (0 or 1).
			static int*     P_list;					   // Production list.
         static RStack   R_stack[];				   // Reduction stack.
         static PStack   P_stack[];				   // Parser stack.
			static PStack*  PStop;				      // Top pointer for Parser stack.
			static int      topstate;				   // Top state (before reductions start).
		};


