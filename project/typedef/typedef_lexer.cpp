
#include "typedef_lexer.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 // 
//    typedef_lexer.cpp																	         

/*    Generated by: DFASTAR 6.3.006
      Grammar:      typedef.lgr
      Skeleton:     ..\..\skl\lexer.cpp.skl
      Output:       typedef_lexer.cpp
*/               
/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 //
//    DFASTAR Lexer Tables.

		Token   typedef_lexer::token;				// Token.
		int     typedef_lexer::linenumb;		   // Line number of token.
		int     typedef_lexer::colnumb;			// Column number of token.
		int     typedef_lexer::tab;				// Tab setting for the input file.

/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 // 
//    Terminal Transition Matrix and Vectors.                            

   // Transition matrix. 
      uchar typedef_lexer::Tm [1030] = 
      {
         49,    2,    2,   47,   46,   44,   17,   49,   45,    1,    1,   12,    1,    1,    1,    1,    1,   13,    1,    1,
          1,    1,   14,   15,   16,    1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,    1,    1,
          1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,    2,    2,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    3,    3,
          0,    0,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
          3,    3,    3,    3,    6,    6,    6,    0,    5,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
          6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    7,    7,    7,    0,    5,    7,   48,    7,    7,    7,
          7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    6,    6,    6,    0,
          8,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
          6,    6,    9,    9,    9,    0,   32,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
          9,    9,    9,    9,    9,    9,    9,    9,   10,   10,   10,    0,    8,   10,   48,   10,   10,   10,   10,   10,
         10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,    9,    9,    9,    0,   35,    9,
          9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
         11,   11,   11,    0,   36,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
         11,   11,   11,   11,   11,   11,    0,   38,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
         11,   11,   11,   11,   11,   11,   11,   11,   11,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,
          1,    1,    1,    1,    1,   18,    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,
          0,    0,    1,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,   19,    1,    1,    1,    1,    1,    1,
          1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,    1,    1,    1,    1,   20,    1,    1,
          1,    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,    1,
          1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   21,    0,    0,    0,    0,    0,    0,    0,
          1,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,   22,    1,    1,    1,    1,    1,    1,    1,    0,
          0,    0,    0,    4,    0,    3,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    1,    0,    1,   23,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
          1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,    1,    1,    1,    1,
          1,    1,    1,    1,    1,    1,    1,   39,    1,    1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,
          1,    1,    1,    1,    1,    1,    1,    1,    1,   24,    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,
          0,    0,    0,    1,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   25,    1,    1,    1,
          1,    1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
          1,    1,    1,    1,   26,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,
          1,    1,    1,    1,    1,    1,    1,    1,    1,   40,    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,
          0,    1,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   27,    1,    1,    1,    1,
          0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,    1,   28,    1,    1,    1,    1,    1,    1,
          1,    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,    1,    1,
          1,    1,    1,   29,    1,    1,    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    1,
          0,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   41,    1,    1,    0,    0,
          0,    0,    0,    0,    0,    1,    0,    1,    1,    1,   30,    1,    1,    1,    1,    1,    1,    1,    1,    1,
          1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,    1,    1,    1,   31,
          1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,
          1,    1,    1,   33,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,
          0,    0,    0,    1,    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,   34,    1,    1,    1,    1,    1,
          1,    1,    7,    7,    7,    0,   32,    7,   48,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
          7,    7,    7,    7,    7,    7,    7,    7,    0,    0,    0,    0,    0,    0,    0,    1,    0,    1,    1,    1,
          1,    1,   42,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,    0,    0,    0,    0,    0,
          0,    1,    0,    1,    1,    1,    1,   37,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
          7,    7,    7,    0,   35,    7,   48,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
          7,    7,    7,    7,    7,    7,   10,   10,   10,    0,   36,   10,   48,   10,   10,   10,   10,   10,   10,   10,
         10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,    0,    0,    0,    0,    0,    0,    0,    1,
          0,    1,    1,    1,   43,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,   10,   10,
         10,    0,   38,   10,   48,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
         10,   10,   10,   10,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0
      };

   // T_matrix row. 
      ushort typedef_lexer::Tr [50] = 
      {
          0,   26,   52,   78,  104,  130,  156,  182,  208,  234,  260,  283,  309,  335,  361,  387,  413,  439,  458,  484,
        510,  536,  562,  588,  614,  640,  666,  692,  718,  744,  770,  796,  822,  848,  874,  900,  926,  952,  978,   26,
         26,   26,   26,   26, 1004, 1004, 1004, 1004, 1004, 1004
      };

   // T_matrix column. 
      uchar typedef_lexer::Tc [256] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    3,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    4,    0,    5,    0,    0,    6,    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,    0,    8,
          0,    0,    0,    0,    0,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
          9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    9,    0,    0,    0,    0,    9,    0,   10,    9,   11,
         12,   13,   14,   15,   16,   17,    9,    9,    9,    9,   18,   19,   20,    9,   21,   22,   23,   24,    9,    9,
          9,   25,    9,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
      };

   // Token numbers for each state. 
      char typedef_lexer::terminal [50] = 
      {
          0,    1,   -1,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    1,    1,    1,    0,    1,    1,
          1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,    1,    1,    0,    0,    1,    0,    9,
          8,   10,    5,   11,    3,    4,    7,    2,   -1,    0
      };


/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 //
//    DFASTAR Lexer.       																							  

/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 // 

void  typedef_lexer::lexer_init (char* input_start) 
{
		tab = 4;
      colnumb = 0;
		linenumb = 1;
		token.end = input_start;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 // 

int   typedef_lexer::get_token ()			// Medium lexer.		
{
      int x, y;								// State, next state.
		do 
		{
    		x = 0;
			token.start = token.end;
			token.linenumb = linenumb;
      	while ((y = Tm [Tr [x] + Tc [(uchar)*token.end]]) > 0)   
			{
				x = y;
				if (*token.end == '\n') linenumb++;
			   token.end++;
			}
		}
  	  	while (terminal[x] < 0);			// Ignore whitespace.		
		return terminal[x];					// Return terminal number.	
}

//                                                                                                 // 
/////////////////////////////////////////////////////////////////////////////////////////////////////

