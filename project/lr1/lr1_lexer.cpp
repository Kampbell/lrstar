
#include "lr1_lexer.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 // 
//    lr1_lexer.cpp																	         

/*    Generated by: DFASTAR 6.3.006
      Grammar:      lr1.lgr
      Skeleton:     ..\..\skl\lexer.cpp.skl
      Output:       lr1_lexer.cpp
*/               
/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 //
//    DFASTAR Lexer Tables.

		Token   lr1_lexer::token;				// Token.
		int     lr1_lexer::linenumb;		   // Line number of token.
		int     lr1_lexer::colnumb;			// Column number of token.
		int     lr1_lexer::tab;				// Tab setting for the input file.

/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 // 
//    Terminal Transition Matrix and Vectors.                            

   // Transition matrix. 
      uchar lr1_lexer::Tm [195] = 
      {
         24,    1,    1,   22,   24,   11,   21,   20,   16,   18,   19,   17,    0,    1,    1,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    2,    2,    0,    0,    2,    2,    2,    2,    2,    2,    2,    2,    5,    5,    5,    0,
          4,    5,    5,    5,    5,    5,    5,    5,    6,    6,    6,    0,    4,   23,    6,    6,    6,    6,    6,    6,
          5,    5,    5,    0,    7,    5,    5,    5,    5,    5,    5,    5,    8,    8,    8,    0,   12,    8,    8,    8,
          8,    8,    8,    8,    9,    9,    9,    0,    7,   23,    9,    9,    9,    9,    9,    9,    8,    8,    8,    0,
         13,    8,    8,    8,    8,    8,    8,    8,   10,   10,   10,    0,   14,   10,   10,   10,   10,   10,   10,   10,
          0,   15,   10,   10,   10,   10,   10,   10,   10,    0,    0,    0,    0,    3,    2,    0,    0,    0,    0,    0,
          0,    6,    6,    6,    0,   12,   23,    6,    6,    6,    6,    6,    6,    0,   13,   23,    6,    6,    6,    6,
          6,    6,    9,    9,    9,    0,   14,   23,    9,    9,    9,    9,    9,    9,    0,   15,   23,    9,    9,    9,
          9,    9,    9,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
      };

   // T_matrix row. 
      uchar lr1_lexer::Tr [25] = 
      {
          0,   12,   24,   36,   48,   60,   72,   84,   96,  108,  117,  129,  141,  150,  162,  171,  183,  183,  183,  183,
        183,  183,  183,  183,  183
      };

   // T_matrix column. 
      uchar lr1_lexer::Tc [256] = 
      {
          0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    3,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    4,    0,    0,    0,    0,    5,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    7,    0,    8,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    9,    0,    0,    0,   10,    0,   11,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0
      };

   // Token numbers for each state. 
      char lr1_lexer::terminal [25] = 
      {
          0,   -1,   -1,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    2,    3,    5,    6,
          7,    4,    1,   -1,    0
      };


/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 //
//    DFASTAR Lexer.       																							  

/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 // 

void  lr1_lexer::lexer_init (char* input_start) 
{
		tab = 4;
      colnumb = 0;
		linenumb = 1;
		token.end = input_start;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 // 

int   lr1_lexer::get_token ()			// Medium lexer.		
{
      int x, y;								// State, next state.
		do 
		{
    		x = 0;
			token.start = token.end;
			token.linenumb = linenumb;
      	while ((y = Tm [Tr [x] + Tc [(uchar)*token.end]]) > 0)   
			{
				x = y;
				if (*token.end == '\n') linenumb++;
			   token.end++;
			}
		}
  	  	while (terminal[x] < 0);			// Ignore whitespace.		
		return terminal[x];					// Return terminal number.	
}

//                                                                                                 // 
/////////////////////////////////////////////////////////////////////////////////////////////////////

