                                                                                                                                                                                                                                                    
#ifndef calc_lexer_h
#define calc_lexer_h

/* Original source code with tab = 3 */
/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 //
//    calc_lexer.h

/*    Generated by: DFASTAR 6.3.006
      Grammar:      calc.lgr
      Skeleton:     ..\..\skl\lexer.h.skl
      Output:       calc_lexer.h
*/               
		#define uchar  unsigned char
		#define ushort unsigned short
		#define uint   unsigned int

		#define calc_lexer calc_lexer

		class Token
		{
			public:
			char* start;	   // Start of token.
			char* end;		   // End   of token (character following token).
			int   linenumb;	// Input line number.
			int   colnumb;		// Input column number.
			int   sti;			// Symbol table index.
		};

		class calc_lexer 
		{
			public:
         static Token  token;
			static int    tab;
			static int    linenumb;
			static int    colnumb;

			static char*  string[];					// Strings, if strings were used instead of numbers
			static char*  token_name[];			// Token names, if names were used instead of numbers.

			static int    get_token ();
			static void   lexer_init (char*);

			private:

			static uchar  Tm[];			// Terminal transition matrix (gives next state or reduction).
			static ushort Tr[];			// Terminal transition matrix row (base).
			static uchar  Tc[];			// Terminal transition matrix column (displacement).

			static char   terminal[];	// Terminal-symbol number for symbol recognized.
		};

#endif

