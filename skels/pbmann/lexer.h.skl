                                                                                                                                                                                                                                                    
#ifndef @grm_name;_lexer_h
#define @grm_name;_lexer_h

@("char", "uchar", "short", "ushort", "int", "uint", "char*") 
@//
/* Original source code with tab = 3 */
/////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                 //
//    @grm_name;_lexer.h

/*    Generated by: @program; @version;
      Grammar:      @grm_file;
      Skeleton:     @skl_file;
      Output:       @out_file;
*/               
		#define uchar  unsigned char
		#define ushort unsigned short
		#define uint   unsigned int

		#define @grm_name;_lexer @grm_name;_lexer

		class Token
		{
			public:
			char* start;	   // Start of token.
			char* end;		   // End   of token (character following token).
			int   linenumb;	// Input line number.
			int   colnumb;		// Input column number.
			int   sti;			// Symbol table index.
		};

		class @grm_name;_lexer 
		{
			public:
         static Token  token;
			static int    tab;
			static int    linenumb;
			static int    colnumb;

			static char*  string[];					// Strings, if strings were used instead of numbers
			static char*  token_name[];			// Token names, if names were used instead of numbers.

			static int    get_token ();
			static void   lexer_init (char*);

			private:

@optn_small?;...
			static @bmat_numb.6t; Bm[];			// Bit matrix (0 or 1).
			static @bmat_row. 6t; Br[];			// Bit matrix row (base).
			static @bmat_col. 6t; Bc[];			// Bit matrix column (displacement).
		
@@
			static @tmat_numb.6t; Tm[];			// Terminal transition matrix (gives next state or reduction).
			static @tmat_row. 6t; Tr[];			// Terminal transition matrix row (base).
			static @tmat_col. 6t; Tc[];			// Terminal transition matrix column (displacement).

			static @term_numb.6t; terminal[];	// Terminal-symbol number for symbol recognized.
		};

@def_cons?;...
		enum tokens
		{
			@def_cons.1|%s = %d||,\n         |;
		};

@@
#endif

