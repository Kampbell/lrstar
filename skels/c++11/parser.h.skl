#ifndef @grm_name;_parser_h
#define @grm_name;_parser_h

#include <cstdint>
#include <cstdlib>
#include <exception>
#include <memory>
#include <vector>

#include "@grm_name;lexer.h"

@("int8_t", "uint8_t", "int16_t", "uint16_t", "int", "uint", "const char*")
@//
// Generated by: @program; @version;
// Grammar:      @grm_file;
// Skeleton:     @skl_file;
// Output:       @out_file;

namespace @grm_name; {

@def_cons?;...
// Terminal state num constants
enum Terminal
{
    @def_cons.1|%s = %d||,\n    |;
};
@@

class ParseError: public std::exception {};

@numb_node?;...
// Base AST node class
class Node;
// Node subclassess to be implemented in the user code
@node_name.1|class %s\;||\n|;
@@

// Parser state which is stored in the stack
struct StackFrame
{
    int state;
    int symbol; // Symbol stacked, terminal (positive) or nonterminal (negative).
    int symbolIndex; // TODO: rename to represent that it's term not symbol and document possible values
    const char *start;
    const char *end;
@numb_node?;...
    std::shared_ptr<Node> node;
@@
};

@numb_node?;...
class Visitor
{
public:
    virtual void visit(Node *) {}
    @node_name.1|virtual void visit(%s *) {}||\n    |;
};

// TODO think how to uppercase grammar name dicumented .u format specifier doesn't work.
#define @grm_name;_NODE public: virtual void accept(@grm_name;::Visitor *visitor) {visitor->visit(this);} private:
class Node
{
@grm_name.s;_NODE
public:
    Node(StackFrame *start, int reductionSize);

    static std::shared_ptr<Node> linkup(StackFrame *start, int reductionSize);

protected:
    std::shared_ptr<Node> children;
    std::shared_ptr<Node> next;
};
@@

// Token actions interface
class TokenActions
{
public:
    virtual ~TokenActions() {}

    @tact_func.1|virtual int %s(int terminalNumb, const Token &token) = 0\;||\n        |;
};

class ParseActions
{
public:
    virtual ~ParseActions() {}

    @pact_func.1|virtual void %s(int productionNum, const StackFrame *reductionStart, int reductionSize) = 0\;||\n    |;
};

class Parser
{
public:
    // Parser methods
    Parser();
    ~Parser();

    void setTokenActions(TokenActions *actions) {tokenActions = actions;}
    void setParseActions(ParseActions *actions) {parseActions = actions;}
@numb_node?;...
    std::shared_ptr<Node> parse(const char *input) throw(ParseError);
@@
@numb_node!;...
    void parse(const char *input) throw(ParseError);
@@

// Internal methods
private:
    void reduce(int prodRule);

// Class data
private:
    Lexer lexer;
    TokenActions *tokenActions;
    ParseActions *parseActions;
    std::vector<StackFrame> stack;
    size_t stackTop;
    static const size_t stackIncrementStep;
    int stateNum;

// Internal grammar constants
private:
    static const int acceptState;

    // Production rule length minus one(zero based).
    static const @prod_leng.t; ProdLen[]; // TODO: name should start from lowercase

    // Boolean matrix parser tables
    static const @bmat_numb.t; Bm[]; // matrix data.
    static const @bmat_row.t; Br[]; // row(base).
    static const @bmat_col.t; Bc[]; // column(displacement).
@optn_bm.eq.2;...
    static const @bmat_mask.t; Bmask[]; // masks.
@@

    // Terminal transition matrix(gives next state or reduction).
    static const @tmat_numb.t; Tm[]; // matrix data.
    static const @tmat_row.t; Tr[]; // row(base).
    static const @tmat_col.t; Tc[]; // column(displacement).

    // Nonterminal transition matrix(gives next state or reduction).
    static const @nmat_numb.t; Nm[]; // matrix data.
    static const @nmat_row.t; Nr[]; // row(base).
    static const @nmat_col.t; Nc[]; // column(displacement).

    // Reduction matrix(gives reduction).
    static const @rmat_numb.t; Rm[]; // matrix data.
    static const @rmat_row.t; Rr[]; // row(base).
    static const @rmat_col.t; Rc[]; // column(displacement).

    // Get token action number by terminal number
    static const @tact_numb.t; tokenActionNumber[];
    // Get parser action number by terminal number
    static const @pact_numb.t; parseActionNumber[];
    // Get grammar nonterminal symbol number by terminal number
    static const @prod_head.t; nonterminalNumber[];
@numb_node?;...
    // Get id of a node to be created by production number
    static const @node_numb.t; nodeNumber[];
@@
};

} // namespace @grm_name;

#endif // @grm_name;_parser_h
