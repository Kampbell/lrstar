@("int8_t", "uint8_t", "int16_t", "uint16_t", "int", "uint", "const char*")
@//
// Generated by: @program; @version;
// Grammar:      @grm_file;
// Skeleton:     @skl_file;
// Output:       @out_file;
#ifndef @grm_name;_lexer_h
#define @grm_name;_lexer_h

#include <stdint.h>

namespace @grm_name; {

struct Token
{
    const char* start;
    const char* end;
@optn_line?;...
    int linenumb;
@@
@optn_col?;...
    int colnumb;
@@
};

class Lexer
{
public:
    Lexer() {}

    void start(const char *input);
    int next();
    const Token &currentToken() const {return token;}

@def_cons?;...
    enum tokens
    {
        @def_cons.1|%s = %d||,\n        |;
    };

@@
private:
    Token token;
@optn_line?;...
    int linenumb;
@@
@optn_col?;...
    int colnumb;
@@

    static const int tab;
@strings?;...
    static const char *string[]; // Strings, if strings were used instead of numbers
@@
@def_cons?;...
    static const char *token_name[]; // Token names, if names were used instead of numbers.
@@

@optn_small?;...
    static const @bmat_numb.6t; Bm[]; // Bit matrix (0 or 1).
    static const @bmat_row. 6t; Br[]; // Bit matrix row (base).
    static const @bmat_col. 6t; Bc[]; // Bit matrix column (displacement).

@@
    static const @tmat_numb.6t; Tm[]; // Terminal transition matrix (gives next state or reduction).
    static const @tmat_row. 6t; Tr[]; // Terminal transition matrix row (base).
    static const @tmat_col. 6t; Tc[]; // Terminal transition matrix column (displacement).

    static const @term_numb.6t; terminal[]; // Terminal-symbol number for symbol recognized.
};

} // namespace @grm_name;

#endif // @grm_name;_lexer_h

